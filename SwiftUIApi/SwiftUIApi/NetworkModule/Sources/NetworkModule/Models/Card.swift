//
// Card.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import RealmSwift

public class Card: RealmSwift.Object, Codable {


    public enum Types: String, Codable, CaseIterable {
        case colorless = "Colorless"
        case darkness = "Darkness"
        case dragon = "Dragon"
        case fairy = "Fairy"
        case fighting = "Fighting"
        case fire = "Fire"
        case grass = "Grass"
        case lightning = "Lightning"
        case metal = "Metal"
        case psychic = "Psychic"
        case water = "Water"
    }
    public enum Supertype: String, Codable, CaseIterable {
        case energy = "Energy"
        case pokemon = "Pokémon"
        case trainer = "Trainer"
    }
    public enum Subtype: String, Codable, CaseIterable {
        case ex = "EX"
        case special = "Special"
        case restored = "Restored"
        case levelUp = "Level Up"
        case mega = "MEGA"
        case technicalMachine = "Technical Machine"
        case item = "Item"
        case stadium = "Stadium"
        case supporter = "Supporter"
        case stage1 = "Stage 1"
        case gx = "GX"
        case pokemonTool = "Pokémon Tool"
        case basic = "Basic"
        case legend = "LEGEND"
        case stage2 = "Stage 2"
        case breakValue = "BREAK"
        case rocketsSecretMachine = "Rocket's Secret Machine"
        case empty = ""
    }
    @objc dynamic public var id: String?
    @objc dynamic public var name: String?
    public var nationalPokedexNumber: RealmOptional<Int> = .init(nil)
    @objc dynamic public var imageUrl: String?
    @objc dynamic public var imageUrlHiRes: String?
    public var types = RealmSwift.List<String>()
    @objc dynamic public var supertype: String?
    @objc dynamic public var subtype: String?
    @objc dynamic public var evolvesFrom: String?
    @objc dynamic public var hp: String?
    @objc dynamic public var number: String?
    @objc dynamic public var artist: String?
    @objc dynamic public var rarity: String?
    @objc dynamic public var series: String?
    @objc dynamic public var setValue: String?
    @objc dynamic public var setCode: String?
    public var retreatCost = RealmSwift.List<String>()
    public var attacks = RealmSwift.List<Attack>()
    public var weaknesses = RealmSwift.List<Weakness>()
    public var resistances = RealmSwift.List<Resistance>()
    public var ancientTrait = RealmSwift.List<AncientTrait>()

    public required convenience init(from decoder: Decoder) throws {
        self.init()
        
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try? container.decode(String.self, forKey: .id)
        self.name = try? container.decode(String.self, forKey: .name)
        self.nationalPokedexNumber = .init(try? container.decode(Int.self, forKey: .nationalPokedexNumber))
        self.imageUrl = try? container.decode(String.self, forKey: .imageUrl)
        self.imageUrlHiRes = try? container.decode(String.self, forKey: .imageUrlHiRes)
        self.types.append(objectsIn: (try? container.decode([String].self, forKey: .types)) ?? [])
        self.supertype = try? container.decode(String.self, forKey: .supertype)
        self.subtype = try? container.decode(String.self, forKey: .subtype)
        self.evolvesFrom = try? container.decode(String.self, forKey: .evolvesFrom)
        self.hp = try? container.decode(String.self, forKey: .hp)
        self.number = try? container.decode(String.self, forKey: .number)
        self.artist = try? container.decode(String.self, forKey: .artist)
        self.rarity = try? container.decode(String.self, forKey: .rarity)
        self.series = try? container.decode(String.self, forKey: .series)
        self.setValue = try? container.decode(String.self, forKey: .setValue)
        self.setCode = try? container.decode(String.self, forKey: .setCode)
        self.retreatCost.append(objectsIn: (try? container.decode([String].self, forKey: .retreatCost)) ?? [])
        self.attacks.append(objectsIn: (try? container.decode([Attack].self, forKey: .attacks)) ?? [])
        self.weaknesses.append(objectsIn: (try? container.decode([Weakness].self, forKey: .weaknesses)) ?? [])
        self.resistances.append(objectsIn: (try? container.decode([Resistance].self, forKey: .resistances)) ?? [])
        self.ancientTrait.append(objectsIn: (try? container.decode([AncientTrait].self, forKey: .ancientTrait)) ?? [])
    }

    public enum CodingKeys: String, CodingKey, CaseIterable { 
        case id
        case name
         case nationalPokedexNumber
        case imageUrl
        case imageUrlHiRes
        case types
        case supertype
        case subtype
        case evolvesFrom
        case hp
        case number
        case artist
        case rarity
        case series
        case setValue = "set"
        case setCode
        case retreatCost
        case attacks
        case weaknesses
        case resistances
        case ancientTrait
    }
    
    override public class func primaryKey() -> String? {
        return "id"
    }
}

public extension RealmSwift.List {
    
    func toArray() -> [Element] {
        Array(self)
    }
}
